<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProjectUserTest extends TestCase
{
    use RefreshDatabase;

    private User $first_user;

    private User $second_user;

    private Project $first_project;

    private Project $second_project;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->first_user = \App\Models\User::factory()->create();
        $this->second_user = \App\Models\User::factory()->create();
        $this->first_project = Project::factory()->for($this->first_user, 'owner')->create();
        $this->second_project = Project::factory()->for($this->second_user, 'owner')->create();
    }

    /** @test */
    public function a_user_can_have_many_projects()
    {
        $this->first_user->projects()->attach([$this->first_project->id, $this->second_project->id]);

        $this->assertEquals($this->first_user->projects()->count(), 2);
        $this->assertDatabaseHas('project_user', ['project_id' => $this->first_project->id, 'user_id' => $this->first_user->id]);
        $this->assertDatabaseHas('project_user', ['project_id' => $this->second_project->id, 'user_id' => $this->first_user->id]);
    }

    /** @test */
    public function a_project_can_have_many_users()
    {
        $this->first_project->users()->attach([$this->first_user->id, $this->second_user->id]);

        $this->assertEquals($this->first_project->users()->count(), 2);
        $this->assertDatabaseHas('project_user', ['project_id' => $this->first_project->id, 'user_id' => $this->first_user->id]);
        $this->assertDatabaseHas('project_user', ['project_id' => $this->first_project->id, 'user_id' => $this->second_user->id]);
    }
}
