<?php

namespace Tests\Feature;

use App\Mail\ProjectUserInviteMail;
use App\Models\Project;
use App\Models\ProjectUser;
use App\Models\ProjectUserInvite;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;

class ProjectUserTest extends TestCase
{
    use RefreshDatabase;

    private User $first_user;

    private User $second_user;

    private Project $first_project;

    private Project $second_project;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->first_user = \App\Models\User::factory()->create();
        $this->second_user = \App\Models\User::factory()->create();
        $this->first_project = Project::factory()->for($this->first_user, 'owner')->create();
        $this->second_project = Project::factory()->for($this->second_user, 'owner')->create();
    }

    /** @test */
    public function a_user_can_have_many_projects()
    {
        // first project gets attached to owner automatically
        $this->first_user->projects()->attach($this->second_project->id);

        $this->assertEquals($this->first_user->projects()->count(), 2);
        $this->assertDatabaseHas(
            'project_user',
            ['project_id' => $this->first_project->id, 'user_id' => $this->first_user->id]
        );
        $this->assertDatabaseHas(
            'project_user',
            ['project_id' => $this->second_project->id, 'user_id' => $this->first_user->id]
        );
    }

    /** @test */
    public function a_project_can_have_many_users()
    {
        $this->first_project->users()->attach($this->second_user->id);

        $this->assertEquals($this->first_project->users()->count(), 2);
        $this->assertDatabaseHas(
            'project_user',
            ['project_id' => $this->first_project->id, 'user_id' => $this->first_user->id]
        );
        $this->assertDatabaseHas(
            'project_user',
            ['project_id' => $this->first_project->id, 'user_id' => $this->second_user->id]
        );
    }

    /** @test */
    public function a_user_can_only_access_their_boards()
    {
        $this
            ->actingAs($this->first_user)
            ->get(route('projects.show', $this->first_project))
            ->assertStatus(Response::HTTP_OK);

        $this
            ->actingAs($this->first_user)
            ->get(route('projects.show', $this->second_project))
            ->assertStatus(Response::HTTP_NOT_FOUND);
    }

    /** @test */
    public function an_owner_can_update_a_project()
    {
        $attributes1 = [
            'title' => 'New Title',
            'description' => 'New Description',
        ];

        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $this->first_project), $attributes1)
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('projects', $attributes1);

        $attributes2 = [
            'title' => 'Another Title',
            'description' => 'Another Description',
        ];
        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $this->second_project), $attributes2)
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseMissing('projects', $attributes2);
    }

    /** @test */
    public function a_manager_can_update_a_project()
    {
        // Case 1: is owner, is manager
        $attributes1 = [
            'title' => 'New Title',
            'description' => 'New Description',
        ];
        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $this->first_project), $attributes1)
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('projects', $attributes1);

        // Case 2: is manager
        $this->second_project->users()->attach($this->first_user, ['is_manager' => true]);
        $attributes2 = [
            'title' => 'Another Title',
            'description' => 'Another Description',
        ];
        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $this->second_project), $attributes2)
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('projects', $attributes2);

        // Case 3: is member, but not manager
        $project3 = Project::factory()->for($this->second_user, 'owner')->create();
        $project3->users()->attach($this->first_user, ['is_manager' => false]);
        $attributes3 = [
            'title' => 'Yet Another Title',
            'description' => 'Yet Another Description',
        ];
        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $project3), $attributes3)
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseMissing('projects', $attributes3);

        // Case 4: is not member
        $project4 = Project::factory()->for($this->second_user, 'owner')->create();
        $attributes4 = [
            'title' => 'A Fourth Title',
            'description' => 'A Fourth Description',
        ];
        $this
            ->actingAs($this->first_user)
            ->patch(route('projects.update', $project4), $attributes4)
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseMissing('projects', $attributes4);
    }

    /** @test */
    public function a_manager_cannot_delete_a_project()
    {
        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.destroy', $this->first_project))
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseMissing('projects', $this->first_project->only(['uuid']));

        $this->second_project->users()->attach($this->first_user, ['is_manager' => true]);
        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.destroy', $this->second_project))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('projects', $this->second_project->only(['uuid']));

        $project3 = Project::factory()->for($this->second_user, 'owner')->create();
        $project3->users()->attach($this->first_user, ['is_manager' => false]);
        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.destroy', $project3))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('projects', $project3->only(['uuid']));

        $project4 = Project::factory()->for($this->second_user, 'owner')->create();
        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.destroy', $project4))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('projects', $project4->only(['uuid']));
    }

    /** @test */
    public function an_owner_can_remove_user_from_project()
    {
        $this->first_project->users()->attach($this->second_user);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
        ]);

        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.users.destroy', ['project' => $this->first_project, 'user' => $this->second_user]))
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseMissing('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
        ]);
    }

    /** @test */
    public function a_manager_can_remove_user_from_project()
    {
        $third_user = \App\Models\User::factory()->create();
        $this->first_project->users()->attach($this->second_user, ['is_manager' => true]);
        $this->first_project->users()->attach($third_user);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->first_user->id,
            'project_id' => $this->first_project->id,
        ]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
        ]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
        ]);

        $this
            ->actingAs($this->second_user)
            ->delete(route('projects.users.destroy', ['project' => $this->first_project, 'user' => $third_user]))
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseMissing('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
        ]);
    }

    /** @test */
    public function an_owner_cannot_be_removed_from_project()
    {
        $this->first_project->users()->attach($this->second_user, ['is_manager' => true]);

        $this
            ->actingAs($this->second_user)
            ->delete(route('projects.users.destroy', ['project' => $this->first_project, 'user' => $this->first_user]))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->first_user->id,
            'project_id' => $this->first_project->id,
        ]);

        $this
            ->actingAs($this->first_user)
            ->delete(route('projects.users.destroy', ['project' => $this->first_project, 'user' => $this->first_user]))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->first_user->id,
            'project_id' => $this->first_project->id,
        ]);
    }

    /** @test */
    public function an_owner_can_promote_user_to_manager()
    {
        $this->first_project->users()->attach($this->second_user);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => false,
        ]);

        $this
            ->actingAs($this->first_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $this->second_user]
                ),
                ['is_manager' => true]
            )
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
    }

    /** @test */
    public function a_manager_can_promote_user_to_manager()
    {
        $third_user = User::factory()->create();
        $this->first_project->users()->attach($this->second_user, ['is_manager' => true]);
        $this->first_project->users()->attach($third_user, ['is_manager' => false]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => false,
        ]);

        $this
            ->actingAs($this->second_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $third_user]),
                ['is_manager' => true]
            )
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
    }

    /** @test */
    public function a_user_cannot_promote_user_to_manager()
    {
        $third_user = User::factory()->create();
        $this->first_project->users()->attach($this->second_user, ['is_manager' => false]);
        $this->first_project->users()->attach($third_user, ['is_manager' => false]);

        $this
            ->actingAs($this->second_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $third_user]),
                ['is_manager' => true]
            )
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseMissing('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
    }

    /** @test */
    public function a_user_must_belong_to_board_for_promotion()
    {
        $third_user = User::factory()->create();
        $this->first_project->users()->attach($this->second_user, ['is_manager' => false]);

        $this
            ->actingAs($this->second_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $third_user]),
                ['is_manager' => true]
            )
            ->assertStatus(Response::HTTP_NOT_FOUND);
        $this->assertDatabaseMissing('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
    }

    /** @test */
    public function an_owner_cannot_be_demoted_from_manager()
    {
        $this->first_project->users()->attach($this->second_user, ['is_manager' => true]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);

        $this
            ->actingAs($this->second_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $this->first_user]
                ),
                ['is_manager' => false]
            )
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->first_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);

        $this
            ->actingAs($this->first_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $this->first_user]
                ),
                ['is_manager' => false]
            )
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->first_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
    }

    /** @test */
    public function a_manager_can_be_demoted()
    {
        $third_user = User::factory()->create();
        $this->first_project->users()->attach($this->second_user, ['is_manager' => true]);
        $this->first_project->users()->attach($third_user, ['is_manager' => true]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);

        $this
            ->actingAs($this->second_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $third_user]),
                ['is_manager' => false]
            )
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $third_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => false,
        ]);

        $this
            ->actingAs($this->first_user)
            ->patch(
                route('projects.users.update.manager', ['project' => $this->first_project, 'user' => $this->second_user]
                ),
                ['is_manager' => false]
            )
            ->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('project_user', [
            'user_id' => $this->second_user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => false,
        ]);
    }


    /** @test */
    public function an_owner_can_invite_user_to_project()
    {
        Mail::fake();

        // if not a user already
        // create ProjectUserInvite
        // send invitation
        $email = 'unregistered@test.com';
        $this->assertDatabaseMissing('project_user_invite', [
            'email' => $email,
            'project_id' => $this->first_project->id,
        ]);
        $this
            ->actingAs($this->first_user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('success');
        $this->assertDatabaseHas(
            'project_user_invite',
            ['project_id' => $this->first_project->id, 'user_id' => null, 'email' => $email]
        );
        Mail::assertQueued(ProjectUserInviteMail::class, function (ProjectUserInviteMail $mail) use ($email) {
            return $mail->hasTo($email);
        });
        // If already invited, reject
        $this
            ->actingAs($this->first_user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');

        // else
        $email = $this->second_user->email;
        $this->assertDatabaseMissing('project_user_invite', [
            'email' => $email,
            'project_id' => $this->first_project->id,
        ]);
        $this
            ->actingAs($this->first_user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND);
        // if user not part of board, send invitation, create ProjectUserInvite
        // send invitation
        // send mail to user
        $this->assertDatabaseHas(
            'project_user_invite',
            ['project_id' => $this->first_project->id, 'user_id' => $this->second_user->id, 'email' => $email]
        );
        Mail::assertQueued(ProjectUserInviteMail::class, function (ProjectUserInviteMail $mail) use ($email) {
            return $mail->hasTo($email);
        });
        // if user already invited, reject
        $this
            ->actingAs($this->first_user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');

        // if user part of board, reject
        $this->assertDatabaseMissing('project_user', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        ProjectUserInvite::where([
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ])->delete();
        $this->assertDatabaseMissing('project_user_invite', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        ProjectUser::create([
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        $this->assertDatabaseHas('project_user', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        $this
            ->actingAs($this->first_user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');
    }

    /** @test */
    public function a_manager_can_invite_user_to_project()
    {
        $manager = User::factory()->create();
        ProjectUser::create([
            'user_id' => $manager->id,
            'project_id' => $this->first_project->id,
            'is_manager' => true,
        ]);
        Mail::fake();

        // if not a user already
        // create ProjectUserInvite
        // send invitation
        $email = 'unregistered@test.com';
        $this->assertDatabaseMissing('project_user_invite', [
            'email' => $email,
            'project_id' => $this->first_project->id,
        ]);
        $this
            ->actingAs($manager)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('success');
        $this->assertDatabaseHas(
            'project_user_invite',
            ['project_id' => $this->first_project->id, 'user_id' => null, 'email' => $email]
        );
        Mail::assertQueued(ProjectUserInviteMail::class, function (ProjectUserInviteMail $mail) use ($email) {
            return $mail->hasTo($email);
        });
        // If already invited, reject
        $this
            ->actingAs($manager)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');

        // else
        $email = $this->second_user->email;
        $this->assertDatabaseMissing('project_user_invite', [
            'email' => $email,
            'project_id' => $this->first_project->id,
        ]);
        $this
            ->actingAs($manager)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND);
        // if user not part of board, send invitation, create ProjectUserInvite
        // send invitation
        // send mail to user
        $this->assertDatabaseHas(
            'project_user_invite',
            ['project_id' => $this->first_project->id, 'user_id' => $this->second_user->id, 'email' => $email]
        );
        Mail::assertQueued(ProjectUserInviteMail::class, function (ProjectUserInviteMail $mail) use ($email) {
            return $mail->hasTo($email);
        });
        // if user already invited, reject
        $this
            ->actingAs($manager)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');

        // if user part of board, reject
        $this->assertDatabaseMissing('project_user', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        ProjectUserInvite::where([
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ])->delete();
        $this->assertDatabaseMissing('project_user_invite', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        ProjectUser::create([
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        $this->assertDatabaseHas('project_user', [
            'project_id' => $this->first_project->id,
            'user_id' => $this->second_user->id,
        ]);
        $this
            ->actingAs($manager)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertSessionHas('error');
    }

    /** @test */
    public function a_user_cannot_invite_other_users()
    {
        $user = User::factory()->create();
        ProjectUser::create([
            'user_id' => $user->id,
            'project_id' => $this->first_project->id,
            'is_manager' => false,
        ]);

        $email = 'unregistered@test.com';
        $this->assertDatabaseMissing('project_user_invite', [
            'email' => $email,
            'project_id' => $this->first_project->id,
        ]);
        $this
            ->actingAs($user)
            ->post(route('projects.users.store', ['project' => $this->first_project, 'email' => $email]))
            ->assertStatus(Response::HTTP_FORBIDDEN);
        $this->assertDatabaseMissing(
            'project_user_invite',
            ['project_id' => $this->first_project->id, 'user_id' => null, 'email' => $email]
        );
    }
}
