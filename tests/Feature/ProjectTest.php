<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Inertia\Testing\AssertableInertia as Assert;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class ProjectTest extends TestCase
{
    use RefreshDatabase;

    private User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = \App\Models\User::factory()->create();
    }

//    /** @test */
//    public function dashboard_contains_products()
//    {
//        $user = \App\Models\User::factory()->create();
//        $project = \App\Models\Project::factory()->create(['user_id' => $user]);
//
//        $this
//            ->actingAs($user)
//            ->get(route('dashboard'))
//            ->assertStatus(200)
//            ->assertInertia(fn (Assert $page) => $page
//                ->component('Dashboard')
//                ->has('projects', 1, fn (Assert $page) => $page
//                    ->where('uuid', (string) $project->uuid)
//                    ->where('title', $project->title)
//            ));
//    }

    /** @test */
    public function the_product_index_page_can_be_viewed()
    {
        $this
            ->actingAs($this->user)
            ->get(route('projects.index'))
            ->assertStatus(Response::HTTP_FOUND)
            ->assertRedirect(route('dashboard'));
    }

    /** @test */
    public function the_product_show_page_can_be_viewed()
    {
        $project = Project::factory()->for($this->user, 'owner')->create();

        $this
            ->actingAs($this->user)
            ->get(route('projects.show', $project->uuid))
            ->assertStatus(Response::HTTP_OK)
            ->assertInertia(fn(Assert $page) => $page
                ->component('Project/Show')
                ->has('project', fn(Assert $page) => $page
                    ->has('data', fn(Assert $page) => $page
                        ->where('uuid', (string)$project->uuid)
                        ->where('title', $project->title)
                        ->where('description', $project->description)
                        ->where('isOwner', $project->user_id === $this->user->id)
                        ->where('settings', null)
                        ->has('owner')
                    ))
            );
    }

    /** @test */
    public function the_product_create_page_can_be_viewed()
    {
        $this
            ->actingAs($this->user)
            ->get(route('projects.create'))
            ->assertStatus(200)
            ->assertInertia(fn(Assert $page) => $page
                ->component('Project/Create')
            );
    }

    /** @test */
    public function a_product_can_be_created()
    {
        $title = 'New Project';
        $description = 'Project Description';
        $settings = json_encode(['bg' => 'black']);

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => $title,
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertStatus(302)
            ->assertSessionHas('success', 'Project was created.');

        $this->assertDatabaseHas('projects', [
            'title' => $title,
            'description' => $description,
            // can't test json ... why :(
        ]);
    }

    /** @test */
    public function a_product_cannot_be_created_on_validation_error()
    {
        $title = 'New Project';
        $description = 'Project Description';
        $settings = json_encode(['bg' => 'black']);

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => null,
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => str_repeat('a', 256),
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => [],
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => $title,
                'description' => null,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('description');

        $this
            ->actingAs($this->user)
            ->post(route('projects.store'), [
                'title' => $title,
                'description' => [],
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('description');
    }

    /** @test */
    public function the_product_edit_page_can_be_viewed()
    {
        $project = Project::factory()->for($this->user, 'owner')->create();

        $this
            ->actingAs($this->user)
            ->get(route('projects.edit', $project->uuid))
            ->assertStatus(200)
            ->assertInertia(fn(Assert $page) => $page
                ->component('Project/Edit')
                ->has('project', fn(Assert $page) => $page
                    ->has('data', fn(Assert $page) => $page
                        ->where('uuid', (string)$project->uuid)
                        ->where('title', $project->title)
                        ->where('description', $project->description)
                        ->where('isOwner', $project->user_id === $this->user->id)
                        ->where('settings', null)
                    )
                )
            );
    }

    /** @test */
    public function a_product_can_be_updated()
    {
        $project = Project::factory()->for($this->user, 'owner')->create();

        $title = 'New Title';
        $description = 'New Project Description';
        $settings = json_encode(['bg' => 'black']);

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => $title,
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertStatus(302)
            ->assertSessionHas('success', 'Project was updated.');

        $this->assertDatabaseHas('projects', [
            'title' => $title,
            'description' => $description,
            // can't test json ... why :(
        ]);
    }

    /** @test */
    public function a_product_cannot_be_updated_on_validation_error()
    {
        $project = Project::factory()->for($this->user, 'owner')->create();

        $title = 'New Project';
        $description = 'New Project Description';
        $settings = json_encode(['bg' => 'black']);

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => null,
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => str_repeat('a', 256),
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => [],
                'description' => $description,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('title');

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => $title,
                'description' => null,
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('description');

        $this
            ->actingAs($this->user)
            ->patch(route('projects.update', $project->uuid), [
                'title' => $title,
                'description' => [],
                'settings' => $settings,
            ])
            ->assertSessionHasErrors('description');
    }

    /** @test */
    public function a_product_can_be_deleted()
    {
        $project = Project::factory()->for($this->user, 'owner')->create();

        $this
            ->actingAs($this->user)
            ->delete(route('projects.update', $project->uuid))
            ->assertStatus(302)
            ->assertSessionHas('success', 'Project was deleted.');

        $this->assertDatabaseMissing('projects', [
            'title' => $project->title,
            'description' => $project->description,
            // can't test json ... why :(
        ]);
    }
}
